<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>nic-lovin's blog</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <id>http://localhost:4000</id>
 <updated>2020-03-14T22:01:23-04:00</updated>
 <author>
   <name>Nicolas Lamoureux</name>
   <uri>https://nic-lovin.github.io</uri>
   <email></email>
 </author>

 

 <entry>
   <title>UTCTF 2020 - Crack the heart</title>
   <link href="http://localhost:4000/utctf-crack-the-heart"/>
   <id>http://localhost:4000/utctf-crack-the-heart</id>
   <updated>2020-03-14T20:40:00-04:00</updated>
   <content type="html">&lt;p&gt;There was this challenge called &lt;code class=&quot;highlighter-rouge&quot;&gt;Crack the heart&lt;/code&gt; during the UTCTF. Although it wasn’t particularly difficult, there were differents ways to solve this challenge: angr, digging deep down into the reversing, etc. My solution was to patch the binary and then pin it. As I like to not over...</content>
 </entry>

 

 <entry>
   <title>Simple unpacking using IDA (Python)</title>
   <link href="http://localhost:4000/simple-unpacking-with-ida"/>
   <id>http://localhost:4000/simple-unpacking-with-ida</id>
   <updated>2020-02-09T16:01:47-05:00</updated>
   <content type="html">&lt;p&gt;Unpacking binaries is a common thing in malware analysis and binaries in CTFs. I used to put a breakpoint just before the unpacked was called, dumped the memory and analyzed it, but this comes with a lot of disadvantages (I still do it though.). In this post, I’ll show how...</content>
 </entry>

 

 <entry>
   <title>Patching binary in order to debug child process</title>
   <link href="http://localhost:4000/patching-binary-debug"/>
   <id>http://localhost:4000/patching-binary-debug</id>
   <updated>2020-01-04T11:39:47-05:00</updated>
   <content type="html">&lt;p&gt;I sometimes stumble into binaries that use &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateProcess&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateProcessInternal&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateThread&lt;/code&gt; or any functions like that. In this case, the binary is using &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateProcess&lt;/code&gt; function. When debugging with &lt;code class=&quot;highlighter-rouge&quot;&gt;xdbg&lt;/code&gt;, we cannot follow the code excution. In order to debug the binary, I often patch it, then...</content>
 </entry>

 

</feed>